package org.example.permission.permissions.domain;

import io.swagger.v3.oas.annotations.extensions.Extension;
import io.swagger.v3.oas.annotations.extensions.ExtensionProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.format.annotation.DateTimeFormat;

import java.io.Serializable;
import java.time.Instant;

@Getter
@Setter
@MappedSuperclass
@NoArgsConstructor
@SuperBuilder(toBuilder = true)
public abstract class AbstractEntity implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @EqualsAndHashCode.Include
    @Column(updatable = false)
    @Schema(accessMode = Schema.AccessMode.READ_ONLY, extensions = {
            @Extension(properties = {
                    @ExtensionProperty(name = "autogenerated", value = "true")
            })
    })
    private Long id;

    @CreationTimestamp
    @Column(updatable = false)
    @Schema(accessMode = Schema.AccessMode.READ_ONLY, extensions = {
            @Extension(properties = {
                    @ExtensionProperty(name = "autogenerated", value = "true")
            })
    })
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
    private Instant created;

    @UpdateTimestamp
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
    @Schema(accessMode = Schema.AccessMode.READ_ONLY, extensions = {
            @Extension(properties = {
                    @ExtensionProperty(name = "autogenerated", value = "true")
            })
    })
    private Instant updated;
}

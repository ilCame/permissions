plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
}

group = 'org.example.permission'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.compilerArgs << "-Amapstruct.defaultComponentModel=spring"
    options.compilerArgs << "-Amapstruct.unmappedTargetPolicy=IGNORE"
}

ext {
    flywayVersion = '10.13.0'
    logbackVersion = '1.5.6'
    logstashVersion = '7.4'
    log4jVersion = '2.17.1'
    lombokVersion = '1.18.32'
    lombockMSBindingsVersion = '0.2.0'
    jakartaValidationVersion = '3.1.0-M1'
    springDocOpenApiVersion = '2.6.0'
    apacheCollectionVersion = '4.4'
    postgresDriverVersion = '42.7.3'
    elideVersion = '7.1.11'
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'

    developmentOnly "org.springframework.boot:spring-boot-docker-compose"

    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.session:spring-session-core'
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.groovy:groovy'
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    implementation("org.apache.commons:commons-collections4:${apacheCollectionVersion}")
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenApiVersion}"
    implementation "org.postgresql:postgresql:${postgresDriverVersion}"
    implementation "org.hibernate:hibernate-jcache:6.5.2.Final"
    implementation "org.ehcache:ehcache::jakarta"
    implementation("org.redisson:redisson-hibernate-53:3.36.0")
    implementation("com.yahoo.elide:elide-spring-boot-starter:${elideVersion}")
    implementation ("com.yahoo.elide:elide-spring-boot-autoconfigure:${elideVersion}")
    implementation("com.yahoo.elide:elide-swagger:${elideVersion}")

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
    projectName = ''
    stopContainers = false
    buildBeforeUp = false
    removeVolumes = false
    removeContainers = false

    cleanupData {
        projectName = ''
        useComposeFiles = ['docker-compose.yml']
        stopContainers = true
        removeVolumes = true
        removeContainers = true
    }
}
